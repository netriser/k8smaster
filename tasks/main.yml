---
- name: Install dependencies
  ansible.builtin.apt:
    name: "{{ kubernetes_prerequisites_packages }}"
    state: present
    update_cache: true
    cache_valid_time: 3600

# SWAP managment
- name: Remove swap entry from fstab
  ansible.posix.mount:
    path: none
    fstype: swap
    state: absent

- name: Disable Swap memory
  ansible.builtin.command: swapoff -a
  when: ansible_swaptotal_mb == 0

# Containerd Managment
# Modules
- name: Check if containerd module file exists
  ansible.builtin.stat:
    path: /etc/modules-load.d/kubernetes.conf
  register: __containerd_modules_conf_exists

- name: Create k8s.conf file if not exist
  ansible.builtin.copy:
    dest: /etc/modules-load.d/kubernetes.conf
    content: |
      overlay
      br_netfilter
  when: not __containerd_modules_conf_exists.stat.exists
  notify: Restart Containerd

- name: Add containerd modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  register: __modprobe_result
  loop:
    - overlay
    - br_netfilter

# Sysctl
- ansible.posix.sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_set: true
    state: present
    reload: true
  loop:
    - "net.bridge.bridge-nf-call-ip6tables"
    - "net.bridge.bridge-nf-call-iptables"
    - "net.ipv4.ip_forward"

- name: Check if containerd Sysctl file exists
  ansible.builtin.stat:
    path: /etc/sysctl.d/kubernetes.conf
  register: __containerd_sysctl_conf_exists

- name: add a persistent file for sysctl config
  ansible.builtin.copy:
    dest: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
    owner: root
    group: root
    mode: "0750"
  when: not __containerd_sysctl_conf_exists.stat.exists

- name: Enable sysctl modifications
  ansible.builtin.command: sysctl --system
  changed_when: false

# Install containerd
- name: Install containerd
  ansible.builtin.apt:
    name: containerd
    state: present

- name: Enable and start containerd
  ansible.builtin.systemd:
    name: containerd
    enabled: true
    state: started
    daemon_reload: true

- name: Configure containerd
  ansible.builtin.command: "containerd config default > /etc/containerd/config.toml"

- name: configure configuration containerd file
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: "SystemdCgroup = false"
    line: "SystemdCgroup = true"
  notify:
    - Restart Containerd

- ansible.builtin.meta: flush_handlers

# Kubernetes install
- name: add Kubernetes apt-key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: '0644'
    force: true

- name: add Kubernetes' APT repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/ /"
    state: present
    update_cache: yes

- name: Install kubernetes
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - kubelet={{ kubernetes_version }}
    - kubeadm={{ kubernetes_version }}
    - kubectl={{ kubernetes_version }}
  register: __kubernetes_installation

- name: Enable and start kubelet
  ansible.builtin.systemd:
    name: kubelet
    enabled: true
    state: started
    daemon_reload: true

- name: Check if master is up 
  delegate_to: "{{ kubeadm_init_master }}"
  shell: kubectl get nodes
  register: __kubernetes_master_check
  ignore_errors: true
  changed_when: false

- name: Initialise kubernetes cluster
  ansible.builtin.shell: "kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_default_ipv4.address }} --ignore-preflight-errors=NumCPU,Mem"
  register: __kubeadm_init
  when: '"{{ kubeadm_master_group_name }}" in ansible_hostname and __kubernetes_master_check.rc != 0'

- name: Set up local kubeconfig
  ansible.builtin.shell: "{{ item }}"
  loop:
    - mkdir -p $HOME/.kube
    - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    - chown $(id -u):$(id -g) $HOME/.kube/config
  when: ansible_hostname == "k8smaster"

- name: Create .kube directory
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: 0755
  ignore_errors: true

- name: Wait until the file admin.conf created
  ansible.builtin.wait_for:
    path: "/etc/kubernetes/admin.conf"
    timeout: 300

- name: Copy kubernetes configuration file
  ansible.builtin.copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "{{ ansible_env.HOME }}/.kube/config"
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
    mode: 0644
    remote_src: true

- name: Deploy the Tigera Operator
  ansible.builtin.shell: "kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml"
  changed_when: false

- name: Download calico manifest"
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml"
    dest: "/tmp/custom-resources.yaml"
    mode: '0644'

- name: modify IPadress in calico manifest
  ansible.builtin.lineinfile:
    path: "/tmp/custom-resources.yaml"
    regexp: "192.168.0.0/16"
    line: "10.244.0.0/16"

- name: Deploy calico manifest
  ansible.builtin.shell: "kubectl create -f /tmp/custom-resources.yaml"
  changed_when: false
  
